PersonService & PersonServiceClientDesktop

ðŸ’¡ ProjektformÃ¥l

Bygge et komplet C# system bestÃ¥ende af:

En RESTful Web API, der kommunikerer med en SQL Server database

En Windows Forms desktop-klient, der taler med API'et

ðŸ“Š Arkitekturoversigt

ðŸ”¹ Backend: PersonService

Teknologier: ASP.NET Core Web API, MS SQL Server, ADO.NET (SqlClient)

FormÃ¥l: Tilbyde CRUD-operationer over HTTP til persondata

Lagopdeling:

PersonData: Direkte databaseadgang

BusinesslogicLayer: Forretningslogik og validering

DTOs / ModelConversion: Adskiller interne modeller fra API-eksponering

PersonRestService: API-kontrollere

âœ… Testet med:

Swagger UI (GET/POST afprÃ¸vet)

xUnit testprojekt (test af databaseadgang)

ðŸ”¹ Frontend: PersonServiceClientDesktop

Teknologier: C# WinForms (.NET 8), HttpClient, Newtonsoft.Json

FormÃ¥l: BrugergrÃ¦nseflade der kommunikerer med Web API'et

Lagopdeling:

GuiLayer: WinForms brugerflade

BusinesslogicLayer: HÃ¥ndtering af applikationslogik

Servicelayer: HTTP kommunikation via HttpClient

ModelLayer: Person-model brugt lokalt i klienten

âœ… Funktioner:

Hent alle personer fra databasen (GET)

Opret og gem ny person (POST)

Visuel feedback og fejlbeskeder

ðŸŒŸ LÃ¦ring og erfaring

Hvordan man bygger et REST API med ASP.NET Core

Hvordan man opretter forbindelse til en SQL database med SqlClient

Hvordan man opretter et WinForms GUI der kommunikerer med et Web API

Lagdelt arkitektur og "separation of concerns"

Kommunikation over HTTP og JSON mellem frontend og backend

ðŸ”® Testflow

Start Web API (verificÃ©r med Swagger)

Start desktopklient

Klik "Get" for at hente personer fra API og database

Udfyld formular og klik "Save" for at oprette ny person

GenindlÃ¦s listen for at se den opdaterede database

ðŸ“† Fremtidige forbedringer (optionelle)

PUT og DELETE funktionalitet (opdater og slet personer)

Bedre inputvalidering og fejlbeskeder

Bedre UI layout og styling i WinForms

Logning, autentificering, eller ekstra testdÃ¦kning